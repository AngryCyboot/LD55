[gd_resource type="VisualShader" load_steps=25 format=3 uid="uid://l3ed4ojbitjh"]

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_t86t0"]
function = 12

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_76eni"]
default_input_values = [0, 0.0, 1, 1.0]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_pp2pd"]
input_name = "color"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_xucnr"]
input_name = "delta"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_2cagp"]
default_input_values = [0, -6.0, 1, 0.0]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_akwy3"]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_bxmeh"]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_crns7"]
default_input_values = [0, 0.0, 1, -1.5]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_owk8b"]
input_name = "transform"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_pwr64"]
default_input_values = [0, 0.0, 1, 1.0]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_uplg5"]
expanded_output_ports = [0]
operator = 3

[sub_resource type="VisualShaderNodeMultiplyAdd" id="VisualShaderNodeMultiplyAdd_rcv4r"]
default_input_values = [0, 0.0, 1, 0.5, 2, 1.0]

[sub_resource type="VisualShaderNodeTransformDecompose" id="VisualShaderNodeTransformDecompose_r6cqf"]

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_0nxab"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_rnlij"]
expanded_output_ports = [0]
input_name = "velocity"

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_6stcf"]
default_input_values = [0, 0.0, 1, 0.5, 2, 0.5, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_ybp5n"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(0, -0.5, 0)]

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_i301l"]

[sub_resource type="VisualShaderNodeParticleSphereEmitter" id="VisualShaderNodeParticleSphereEmitter_q0u30"]
default_input_values = [0, 10.0, 1, 0.1]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_urdas"]
parameter_name = "impact_area"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_f3rfg"]
default_input_values = [0, Vector3(1, 1, 1), 1, Vector3(0, 0, 0)]
operator = 2

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_yeufw"]
parameter_name = "force"
default_value_enabled = true
default_value = 5.0

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_lfnvf"]
default_input_values = [0, 0.0, 1, 0.8]
operator = 3

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_3vig4"]
constant = 0.1

[resource]
code = "shader_type particles;
uniform float force = 5;
uniform float impact_area = 1;


float __rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float __rand_from_seed_m1_p1(inout uint seed) {
	return __rand_from_seed(seed) * 2.0 - 1.0;
}

float __randf_range(inout uint seed, float from, float to) {
	return __rand_from_seed(seed) * (to - from) + from;
}

uint __hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

mat3 __build_rotation_mat3(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat3(vec3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s), vec3(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s), vec3(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c));
}

mat4 __build_rotation_mat4(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat4(vec4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0), vec4(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0), vec4(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0), vec4(0, 0, 0, 1));
}

vec2 __get_random_unit_vec2(inout uint seed) {
	return normalize(vec2(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec3 __get_random_unit_vec3(inout uint seed) {
	return normalize(vec3(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec2 __get_random_point_in_circle(inout uint seed, float radius, float inner_radius) {
	return __get_random_unit_vec2(seed) * __randf_range(seed, inner_radius, radius);
}

vec3 __get_random_point_in_sphere(inout uint seed, float radius, float inner_radius) {
	return __get_random_unit_vec3(seed) * __randf_range(seed, inner_radius, radius);
}

void start() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// FloatParameter:5
		float n_out5p0 = force;


// FloatParameter:3
		float n_out3p0 = impact_area;


// FloatOp:6
		float n_in6p1 = 0.80000;
		float n_out6p0 = n_out3p0 / n_in6p1;


// SphereEmitter:2
		vec3 n_out2p0 = __get_random_point_in_sphere(__seed, n_out3p0, n_out6p0);


// VectorOp:4
		vec3 n_out4p0 = vec3(n_out5p0) * n_out2p0;


// FloatConstant:7
		float n_out7p0 = 0.100000;


// StartOutput:0
		VELOCITY = n_out4p0;
		COLOR.rgb = vec3(n_out7p0);
		if (RESTART_POSITION) {
			TRANSFORM = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(n_out2p0, 1.0));
			if (RESTART_VELOCITY) {
				VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
			}
			TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		}


	}
}

void process() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// Input:2
		mat4 n_out2p0 = TRANSFORM;


// TransformDecompose:3
		vec3 n_out3p0 = n_out2p0[0].xyz;
		vec3 n_out3p1 = n_out2p0[1].xyz;
		vec3 n_out3p2 = n_out2p0[2].xyz;
		vec3 n_out3p3 = n_out2p0[3].xyz;


// VectorDecompose:4
		float n_out4p0 = n_out3p3.x;
		float n_out4p1 = n_out3p3.y;
		float n_out4p2 = n_out3p3.z;


// Input:6
		vec3 n_out6p0 = VELOCITY;


// Input:13
		float n_out13p0 = DELTA;


// MultiplyAdd:26
		float n_in26p1 = 0.50000;
		float n_in26p2 = 1.00000;
		float n_out26p0 = (n_out13p0 * n_in26p1) + n_in26p2;


// VectorOp:24
		vec3 n_out24p0 = n_out6p0 / vec3(n_out26p0);
		float n_out24p1 = n_out24p0.r;
		float n_out24p2 = n_out24p0.g;
		float n_out24p3 = n_out24p0.b;


// FloatOp:18
		float n_in18p1 = -1.50000;
		float n_out18p0 = n_out4p1 * n_in18p1;


// FloatOp:14
		float n_out14p0 = n_out18p0 * n_out13p0;


// VectorCompose:15
		float n_in15p0 = 0.00000;
		float n_in15p2 = 0.00000;
		vec3 n_out15p0 = vec3(n_in15p0, n_out14p0, n_in15p2);


// VectorOp:8
		vec3 n_out8p0 = n_out24p0 + n_out15p0;


// FloatFunc:10
		float n_out10p0 = abs(n_out24p2);


// FloatOp:11
		float n_out11p0 = n_out10p0 + n_out13p0;


// VectorCompose:9
		vec3 n_out9p0 = vec3(n_out24p1, n_out11p0, n_out24p3);


		vec3 n_out7p0;
// If:7
		float n_in7p1 = 0.50000;
		float n_in7p2 = 0.50000;
		if(abs(n_out4p1 - n_in7p1) < n_in7p2)
		{
			n_out7p0 = n_out24p0;
		}
		else if(n_out4p1 < n_in7p1)
		{
			n_out7p0 = n_out9p0;
		}
		else
		{
			n_out7p0 = n_out8p0;
		}


// Input:12
		vec4 n_out12p0 = COLOR;


// FloatOp:22
		float n_in22p1 = 1.00000;
		float n_out22p0 = n_out13p0 + n_in22p1;


// VectorOp:17
		vec3 n_out17p0 = vec3(n_out12p0.xyz) * vec3(n_out22p0);


// ProcessOutput:0
		VELOCITY = n_out7p0;
		COLOR.rgb = n_out17p0;


	}
}

"
mode = 2
flags/collision_use_scale = false
flags/disable_force = false
flags/disable_velocity = false
flags/keep_data = false
nodes/start/2/node = SubResource("VisualShaderNodeParticleSphereEmitter_q0u30")
nodes/start/2/position = Vector2(-380, 60)
nodes/start/3/node = SubResource("VisualShaderNodeFloatParameter_urdas")
nodes/start/3/position = Vector2(-940, 60)
nodes/start/4/node = SubResource("VisualShaderNodeVectorOp_f3rfg")
nodes/start/4/position = Vector2(-40, -80)
nodes/start/5/node = SubResource("VisualShaderNodeFloatParameter_yeufw")
nodes/start/5/position = Vector2(-660, -140)
nodes/start/6/node = SubResource("VisualShaderNodeFloatOp_lfnvf")
nodes/start/6/position = Vector2(-582.668, 139.181)
nodes/start/7/node = SubResource("VisualShaderNodeFloatConstant_3vig4")
nodes/start/7/position = Vector2(-194.965, 302.656)
nodes/start/connections = PackedInt32Array(2, 0, 0, 4, 3, 0, 2, 0, 2, 0, 4, 1, 4, 0, 0, 1, 5, 0, 4, 0, 3, 0, 6, 0, 6, 0, 2, 1, 7, 0, 0, 2)
nodes/process/2/node = SubResource("VisualShaderNodeInput_owk8b")
nodes/process/2/position = Vector2(-1740, -260)
nodes/process/3/node = SubResource("VisualShaderNodeTransformDecompose_r6cqf")
nodes/process/3/position = Vector2(-1460, -300)
nodes/process/4/node = SubResource("VisualShaderNodeVectorDecompose_0nxab")
nodes/process/4/position = Vector2(-1240, -240)
nodes/process/6/node = SubResource("VisualShaderNodeInput_rnlij")
nodes/process/6/position = Vector2(-1940, -60)
nodes/process/7/node = SubResource("VisualShaderNodeIf_6stcf")
nodes/process/7/position = Vector2(-240, -120)
nodes/process/8/node = SubResource("VisualShaderNodeVectorOp_ybp5n")
nodes/process/8/position = Vector2(-480, 20)
nodes/process/9/node = SubResource("VisualShaderNodeVectorCompose_i301l")
nodes/process/9/position = Vector2(-540, 380)
nodes/process/10/node = SubResource("VisualShaderNodeFloatFunc_t86t0")
nodes/process/10/position = Vector2(-1080, 380)
nodes/process/11/node = SubResource("VisualShaderNodeFloatOp_76eni")
nodes/process/11/position = Vector2(-880, 460)
nodes/process/12/node = SubResource("VisualShaderNodeInput_pp2pd")
nodes/process/12/position = Vector2(-1380, 800)
nodes/process/13/node = SubResource("VisualShaderNodeInput_xucnr")
nodes/process/13/position = Vector2(-2100, 260)
nodes/process/14/node = SubResource("VisualShaderNodeFloatOp_2cagp")
nodes/process/14/position = Vector2(-820, 160)
nodes/process/15/node = SubResource("VisualShaderNodeVectorCompose_akwy3")
nodes/process/15/position = Vector2(-660, 160)
nodes/process/17/node = SubResource("VisualShaderNodeVectorOp_bxmeh")
nodes/process/17/position = Vector2(-746.411, 728.608)
nodes/process/18/node = SubResource("VisualShaderNodeFloatOp_crns7")
nodes/process/18/position = Vector2(-980, 100)
nodes/process/22/node = SubResource("VisualShaderNodeFloatOp_pwr64")
nodes/process/22/position = Vector2(-1720, 400)
nodes/process/24/node = SubResource("VisualShaderNodeVectorOp_uplg5")
nodes/process/24/position = Vector2(-1500, -60)
nodes/process/26/node = SubResource("VisualShaderNodeMultiplyAdd_rcv4r")
nodes/process/26/position = Vector2(-1780, 100)
nodes/process/connections = PackedInt32Array(2, 0, 3, 0, 3, 3, 4, 0, 4, 1, 7, 0, 8, 0, 7, 4, 9, 0, 7, 5, 10, 0, 11, 0, 11, 0, 9, 1, 7, 0, 0, 1, 13, 0, 14, 1, 15, 0, 8, 1, 14, 0, 15, 1, 12, 0, 17, 0, 17, 0, 0, 2, 4, 1, 18, 0, 18, 0, 14, 0, 13, 0, 22, 0, 22, 0, 17, 1, 13, 0, 11, 1, 6, 0, 24, 0, 24, 0, 7, 3, 24, 0, 8, 0, 24, 1, 9, 0, 24, 2, 10, 0, 24, 3, 9, 2, 13, 0, 26, 0, 26, 0, 24, 1)
